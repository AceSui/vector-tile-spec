package vector_tile;

option optimize_for = LITE_RUNTIME;

message Tile {

        // GeomType is described in section 4.3.4 of the specification
        enum GeomType {
             UNKNOWN = 0;
             POINT = 1;
             LINESTRING = 2;
             POLYGON = 3;
        }

        // Variant type encoding
        // The use of values is described in section 4.1 of the specification
        message Value {
                // Exactly one of these values must be present in a valid message
                optional string string_value = 1;
                optional float float_value = 2;
                optional double double_value = 3;
                optional int64 int_value = 4;
                optional uint64 uint_value = 5;
                optional sint64 sint_value = 6;
                optional bool bool_value = 7;

                extensions 8 to max;
        }

        // Features are described in section 4.2 of the specification
        message Feature {
                optional uint64 id = 1 [ default = 0 ];

                // Tags of this feature are encoded as repeated pairs of
                // integers.
                // A detailed description of tags is located in sections
                // 4.2 and 4.4 of the specification
                repeated uint32 tags = 2 [ packed = true ];

                // The type of geometry stored in this feature.
                optional GeomType type = 3 [ default = UNKNOWN ];

                // Contains a stream of commands and parameters (vertices).
                // A detailed description on geometry encoding is located in 
                // section 4.3 of the specification.
                repeated uint32 geometry = 4 [ packed = true ];
                
                // Properties replace existing tags field and
                // uses the properties field instead. This would only be used if version
                // for a layer is 3 or greater and tags should not be used at that point
                //
                // The properties field is much like the tags value in the it is two integers
                // pairs that reference key and value pairs however, it is broken out into a
                // "key_index" and an "complex_value". 
                // 
                // The "key_index" is much like the key index in the use for tags, but instead
                // of pointing to "keys" field in the Layers, it points to the "string_values".
                // This is the same value store as strings for use in values, so duplicates here
                // will be pointing to the same indexed position. 
                //
                // An complex value has two parts, the first 4 bits are the type bits
                // and the remaining bits are the parameter bits. What is stored in the parameter
                // bits is dependant on what the type bit is selected. For example for inline values,
                // the parameter field is not an index but simply a value. For other types it might
                // be an index position into a value storage of the layer.
                // 
                // uint64t type = complex_value & 0x0F; // First 4 Bits
                // uint64t parameter = complex_value >> 4;
                // 
                //     Type     | Id  | Parameter
                // ---------------------------------
                // inline sint  |  0  | value of integer ( values between -2^59+1 to 2^59-1 )
                // inline uint  |  1  | value of unsigned integer ( values between 0 to 2^60-1 )
                // bool/null    |  2  | value of 0 = false, 1 = true, 2 = null
                // float        |  3  | index to float_values in layer
                // double       |  4  | index to double_values in layer
                // string       |  5  | index to string_values in layer
                // int          |  6  | index to int_values in layer
                // uint         |  7  | index to uint_values in layer
                // list / map   |  8  | (if 4th bit is 0 is list)
                //              |     |   remaining bits are length of the list where
                //              |     |   each item in the list is a complex value
                //              |     | (if 4th bit is 1 is map)
                //              |     |   remaining bits are the number of key_index and 
                //              |     |   complex_value pairs to follow (same as properties)
                repeated uint64 properties = 5 [ packed = true ];
        }

        // Layers are described in section 4.1 of the specification
        message Layer {
                // Any compliant implementation must first read the version
                // number encoded in this message and choose the correct
                // implementation for this version number before proceeding to
                // decode other parts of this message.
                required uint32 version = 15 [ default = 1 ];

                required string name = 1;

                // The actual features in this tile.
                repeated Feature features = 2;

                // Dictionary encoding for keys
                repeated string keys = 3;

                // Dictionary encoding for values
                repeated Value values = 4;

                // Although this is an "optional" field it is required by the specification.
                // See https://github.com/mapbox/vector-tile-spec/issues/47
                optional uint32 extent = 5 [ default = 4096 ];

                repeated string string_values = 7;
                repeated double double_values = 8 [ packed = true ];
                repeated float float_values = 9 [ packed = true ];
                repeated sint64 sint64_values = 10 [ packed = true ];
                repeated uint64 uint64_values = 11 [ packed = true ];

                extensions 16 to max;
        }

        repeated Layer layers = 3;

        extensions 16 to 8191;
}
