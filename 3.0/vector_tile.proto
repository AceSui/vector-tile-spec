package vector_tile;

option optimize_for = LITE_RUNTIME;

message Tile {

        // GeomType is described in section 4.3.4 of the specification
        enum GeomType {
             UNKNOWN = 0;
             POINT = 1;
             LINESTRING = 2;
             POLYGON = 3;
        }

        // Left for backwards compatibility. Not used in version 3.
        message Value {
                // Exactly one of these values must be present in a valid message
                optional string string_value = 1;
                optional float float_value = 2;
                optional double double_value = 3;
                optional int64 int_value = 4;
                optional uint64 uint_value = 5;
                optional sint64 sint_value = 6;
                optional bool bool_value = 7;

                extensions 8 to max;
        }

        enum DimensionType {
            INTEGER = 0;
            DOUBLE = 1;
        }

        message Dimension {
            required DimensionType type = 1;
            // is_elevation can only be used once for all dimensions in the layer
            optional bool is_elevation = 2;

            // Formula for values in dimension:
            // value = global_offset + scale * (delta_encoded_value + offset)

            // Individual offset for this specific tile
            optional int64 offset =  3;
            // only used if type == int or unsigned int
            // if not set for int type then scale = 1 and global_offset = 0
            optional int64 scale_int = 4;
            optional int64 global_offset_int = 5;
            // only used if type == double
            // if not set for double type then scale = 1.0 and global_offset = 0.0
            optional double scale_double = 8; 
            optional double global_offset_double = 9;
            // Index to keys for name of dimension (optional)
            optional string name = 10;
        }

        // Features are described in section 4.2 of the specification
        message Feature {
                optional uint64 id = 1 [ default = 0 ];

                // Left for backwards compatibility. Not used in version 3.
                repeated uint32 tags = 2 [ packed = true ];

                // The type of geometry stored in this feature.
                optional GeomType type = 3 [ default = UNKNOWN ];

                // Contains a stream of commands and parameters (vertices).
                // A detailed description on geometry encoding is located in 
                // section 4.3 of the specification.
                repeated uint32 geometry = 4 [ packed = true ];

                // Attributes of this feature in a special inline encoding. See
                // the spec for details.
                repeated uint64 attributes = 5 [ packed = true ];
                
                // A string as a unique identifier for the Feature
                optional string string_id = 10;

                // Extra dimensional data to add to the geometry.
                // This is a delta encoded set of values that start at 
                // global_offset_*, with each integer increment
                // incrementing by scale_*.
                //
                // The least-significant bit distinguishes between
                // increments and nulls:
                //
                //  0: the remaining bits are the increment.
                //  1: this node has no data for this dimension.
                //
                // The first increment after a null is given relative
                // to the last non-null value, or to global_offset_*
                // if there was no previous value.
                //
                // There is one `extended_geometry` element per
                // DimensionalMapping per `moveto` or `lineto` in the
                // `geometry`. If there are multiple DimensionalMappings,
                // all the dimensions for each `moveto` or `lineto` are
                // given in sequence before moving on to the dimensions
                // for the next `moveto` or `lineto`.
                repeated uint32 extended_geometry = 6 [ packed = true];

                // Contains indexes into the `values` array for an additional
                // non-geometric attribute per node. Although not strictly
                // required, the attribute value for each node will typically
                // be of `map` type, giving the additional data for each node
                // as a set of key-value pairs.
                //
                // There are expected to be the same number of value references
                // here as there are `moveto` or `lineto` operations in `geometry`.
                // If no value exists for a node, a null value should be used.
                //
                // If the `blake_properties` branch is selected, these would
                // be a series of `complex_attributes` instead of `values`
                // references.
                repeated uint64 node_attributes = 7 [ packed = true ];

        }

        // Layers are described in section 4.1 of the specification
        message Layer {
                // Any compliant implementation must first read the version
                // number encoded in this message and choose the correct
                // implementation for this version number before proceeding to
                // decode other parts of this message.
                required uint32 version = 15 [ default = 1 ];

                required string name = 1;

                // The actual features in this tile.
                repeated Feature features = 2;

                // Dictionary encoding for keys
                repeated string keys = 3;

                // Left for backwards compatibility. Not used in version 3.
                repeated Value values = 4;

                // Although this is an "optional" field it is required by the specification.
                // See https://github.com/mapbox/vector-tile-spec/issues/47
                optional uint32 extent = 5 [ default = 4096 ];
                
                // Describe the number of extra dimensions that will be expected in the 
                // extended_geometry field of Features. 
                // The count of Dimension indicates the number of extra dimensions
                repeated Dimension dimension_map = 8;

                repeated string string_values = 6;

                repeated float float_values = 7 [ packed = true ];

                repeated double double_values = 8 [ packed = true ];

                repeated fixed64 int_values = 9 [ packed = true ];

                extensions 16 to max;
        }

        repeated Layer layers = 3;

        extensions 16 to 8191;
}
