package vector_tile;

option optimize_for = LITE_RUNTIME;

message Tile {

        // GeomType is described in section 4.3.4 of the specification
        enum GeomType {
             UNKNOWN = 0;
             POINT = 1;
             LINESTRING = 2;
             POLYGON = 3;
        }

        // Left for backwards compatibility. Not used in version 3.
        message Value {
                // Exactly one of these values must be present in a valid message
                optional string string_value = 1;
                optional float float_value = 2;
                optional double double_value = 3;
                optional int64 int_value = 4;
                optional uint64 uint_value = 5;
                optional sint64 sint_value = 6;
                optional bool bool_value = 7;

                extensions 8 to max;
        }

        message Scaling {
                // Formula for values in dimension:
                // value = global_offset + scale * (delta_encoded_value + offset)

                // Individual offset for this specific tile
                optional sint64 offset = 1;

                // Only one of scale_int or scale_double may appear.
                // If neither scale_int nor scale_double appears, scale = 1.0.
                optional sint64 scale_int = 2;
                optional double scale_double = 3; 

                // Only one of global_offset_int or global_offset_double may appear.
                // If neither global_offset_int nor global_offset_double appears,
                // global_offset = 0.0.
                optional sint64 global_offset_int = 4;
                optional double global_offset_double = 5;
        }

        message PerNodeAttribute {
            
                optional string name = 1;

                // Can either use attributes or delta_attributes
                // but not both!

                // Attributes are a series of attributes for each node (point)
                // in the geometry and use complex_values (see PR on this)
                // for each value.
                repeated int64 attributes = 2;
                
                // Delta attributes are used for higher levels of compression
                // for floating point or integer data via delta encoding.
                //
                // The first value in a delta attribute is special as it provides
                // information about possible scaling of the delta attribute!
                // This value can be decoded as follows:
                // 
                // uint64_t type = first_value & 0x03; // least significant 2 bits
                // uint64_t index = first_value >> 2;
                // 
                // The type is used to determine the output type:
                // 0 - no scaling (ignore index value)
                // 1 - integer scaling
                // 2 - double scaling
                //
                // The index highlights what `scaling` message to use if any from
                // the feature's layer. This scaling will be applied after a value
                // is retrieved from the delta encoding.
                //
                // All following values after the first value in delta_attributes
                // as nullable_deltas:
                //
                // A nullable delta can be decoded as follows:
                //
                // bool null = nullable_delta & 1;
                // uint64_t delta = nullable_delta >> 1;
                //
                // If the value is null, no delta is applied and the cursor does
                // not move.
                repeated int64 delta_attributes = 3;
        }

        // Features are described in section 4.2 of the specification
        message Feature {
                optional uint64 id = 1 [ default = 0 ];

                // Left for backwards compatibility. Not used in version 3.
                repeated uint32 tags = 2 [ packed = true ];

                // The type of geometry stored in this feature.
                optional GeomType type = 3 [ default = UNKNOWN ];

                // Contains a stream of commands and parameters (vertices).
                // A detailed description on geometry encoding is located in 
                // section 4.3 of the specification.
                repeated uint32 geometry = 4 [ packed = true ];
                
                // Attributes of this feature in a special inline encoding. See
                // the spec for details.
                repeated uint64 attributes = 5 [ packed = true ];
                
                // 3d dimension is a delta encoded series of integer values 
                // for each point in geometry that start at 0.
                // These values are scaled as necessary using the feature's
                // elevation_scaling values. 
                repeated uint32 elevation = 6 [ packed = true];
                
                repeated PerNodeAttribute node_attributes = 7;
                
                // A string as a unique identifier for the Feature
                optional string string_id = 10;
        }

        // Layers are described in section 4.1 of the specification
        message Layer {
                // Any compliant implementation must first read the version
                // number encoded in this message and choose the correct
                // implementation for this version number before proceeding to
                // decode other parts of this message.
                required uint32 version = 15 [ default = 1 ];

                required string name = 1;

                // The actual features in this tile.
                repeated Feature features = 2;

                // Dictionary encoding for keys
                repeated string keys = 3;

                // Left for backwards compatibility. Not used in version 3.
                repeated Value values = 4;

                // Although this is an "optional" field it is required by the specification.
                // See https://github.com/mapbox/vector-tile-spec/issues/47
                optional uint32 extent = 5 [ default = 4096 ];
                
                optional Scaling elevation_scaling = 10;
                
                // Accessed by index in order of layer here.
                repeated Scaling attribute_scalings = 11;

                repeated string string_values = 6;

                repeated float float_values = 7 [ packed = true ];

                repeated double double_values = 8 [ packed = true ];

                repeated fixed64 int_values = 9 [ packed = true ];

                extensions 16 to max;
        }

        repeated Layer layers = 3;

        extensions 16 to 8191;
}
